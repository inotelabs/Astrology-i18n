---
import { getCollection, type CollectionEntry } from 'astro:content';
import LandingLayout from '@/layouts/LandingLayout.astro';
import PostCardCover from '@/cards/PostCardCover.astro';
import PostCardDescription from '@/cards/PostCardDescription.astro';
import PostCardHorizontal from '@/cards/PostCardHorizontal.astro';
import Pagination from '@/features/Pagination.astro';
import CardWithPriority from '@/features/CardWithPriority.astro';
import type { Lang } from '@/utils/i18n';
import { DEFAULT_LANG } from '@/utils/i18n';
import { t } from '@/utils/translations';

type Post = CollectionEntry<'post'>;

function toUrl(entry: Post, lang: Lang): string {
  const idWithoutExt = entry.id.replace(/\.(md|mdx|markdown)$/i, '');
  const slug = idWithoutExt.replace(new RegExp(`^${lang}/`), '');
  return `/${lang}/posts/${slug}/`;
}

const PAGE_SIZE = 12;
const lang = DEFAULT_LANG as Lang;

const posts = await getCollection('post', (p) => !p.data.draft && p.data.locales === (lang as any));
const all = posts.sort(
  (a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
);
const items = all.slice(0, PAGE_SIZE);

const total = all.length;
const lastPage = Math.max(1, Math.ceil(total / PAGE_SIZE));
const page = {
  data: items,
  start: 0,
  end: items.length - 1,
  total,
  currentPage: 1,
  size: PAGE_SIZE,
  lastPage,
  url: {
    current: `/${lang}/`,
    prev: undefined,
    next: lastPage > 1 ? `/${lang}/2/` : undefined,
    first: `/${lang}/`,
    last: lastPage > 1 ? `/${lang}/${lastPage}/` : undefined,
  },
};

const h1 = t(lang, 'headings.home.h1');
const h2 = t(lang, 'headings.home.h2');
const title = t(lang, 'headings.home.title') || h1;
---

<LandingLayout lang={lang} title={title} canonical={Astro.url.href}>
  <fragment slot="header">
    <div class="sr-only">
      <h1>{h1}</h1>
      <h2>{h2}</h2>
      <p>{t(lang, 'site.description')}</p>
    </div>
  </fragment>
  <div class="space-y-5 sm:hidden">
    {
      items.map((p, idx) => (
        <CardWithPriority
          component={PostCardCover}
          index={idx}
          props={{
            href: toUrl(p, lang),
            imageSrc: p.data.heroImage,
            imageAlt: p.data.heroImageAlt,
            title: p.data.title,
            date: p.data.pubDate,
            category: p.data.category,
            lang,
            class: 'shadow-sm ring-1 ring-black/5 dark:ring-white/10',
          }}
        />
      ))
    }
  </div>

  <div class="hidden grid-cols-2 gap-5 sm:grid lg:hidden">
    {
      items[0] && (
        <div class="col-span-2">
          <CardWithPriority
            component={PostCardHorizontal}
            index={0}
            props={{
              href: toUrl(items[0], lang),
              imageSrc: items[0].data.heroImage,
              imageAlt: items[0].data.heroImageAlt,
              title: items[0].data.title,
              description: items[0].data.description,
              date: items[0].data.pubDate,
              category: items[0].data.category,
              lang,
              class: 'shadow-sm ring-1 ring-black/5 dark:ring-white/10',
            }}
          />
        </div>
      )
    }
    {
      items
        .slice(1, 3)
        .map((p) => (
          <PostCardDescription
            href={toUrl(p, lang)}
            imageSrc={p.data.heroImage}
            imageAlt={p.data.heroImageAlt}
            title={p.data.title}
            description={p.data.description}
            date={p.data.pubDate}
            category={p.data.category}
            lang={lang}
            class="shadow-sm ring-1 ring-black/5 dark:ring-white/10"
          />
        ))
    }
    {
      items.slice(3, 12).map((p, i, arr) =>
        i === arr.length - 1 && arr.length % 2 === 1 ? (
          <div class="col-span-2">
            <PostCardCover
              href={toUrl(p, lang)}
              imageSrc={p.data.heroImage}
              imageAlt={p.data.heroImageAlt}
              title={p.data.title}
              date={p.data.pubDate}
              category={p.data.category}
              lang={lang}
              class="shadow-sm ring-1 ring-black/5 dark:ring-white/10"
            />
          </div>
        ) : (
          <PostCardCover
            href={toUrl(p, lang)}
            imageSrc={p.data.heroImage}
            imageAlt={p.data.heroImageAlt}
            title={p.data.title}
            date={p.data.pubDate}
            category={p.data.category}
            lang={lang}
            class="shadow-sm ring-1 ring-black/5 dark:ring-white/10"
          />
        ),
      )
    }
  </div>

  <div class="hidden grid-cols-12 gap-6 lg:grid">
    {
      items[0] && (
        <div class="col-span-12">
          <CardWithPriority
            component={PostCardHorizontal}
            index={0}
            props={{
              href: toUrl(items[0], lang),
              imageSrc: items[0].data.heroImage,
              imageAlt: items[0].data.heroImageAlt,
              title: items[0].data.title,
              description: items[0].data.description,
              date: items[0].data.pubDate,
              category: items[0].data.category,
              lang,
              class: 'shadow-sm ring-1 ring-black/5 dark:ring-white/10',
            }}
          />
        </div>
      )
    }
    {
      items.slice(1, 3).map((p) => (
        <div class="col-span-12 md:col-span-6">
          <PostCardDescription
            href={toUrl(p, lang)}
            imageSrc={p.data.heroImage}
            imageAlt={p.data.heroImageAlt}
            title={p.data.title}
            description={p.data.description}
            date={p.data.pubDate}
            category={p.data.category}
            lang={lang}
            class="shadow-sm ring-1 ring-black/5 dark:ring-white/10"
          />
        </div>
      ))
    }
    {
      items.slice(3, 12).map((p) => (
        <div class="col-span-12 md:col-span-4">
          <PostCardCover
            href={toUrl(p, lang)}
            imageSrc={p.data.heroImage}
            imageAlt={p.data.heroImageAlt}
            title={p.data.title}
            date={p.data.pubDate}
            category={p.data.category}
            lang={lang}
            class="shadow-sm ring-1 ring-black/5 dark:ring-white/10"
          />
        </div>
      ))
    }
  </div>

  <Pagination page={page} class="mt-10" />
</LandingLayout>
