---
import { getCollection, type CollectionEntry } from 'astro:content';
import LandingLayout from '@/layouts/LandingLayout.astro';
import Pagination from '@/features/Pagination.astro';
import PostCardCover from '@/cards/PostCardCover.astro';
import CardWithPriority from '@/features/CardWithPriority.astro';
import type { Lang } from '@/utils/i18n';
import { DEFAULT_LANG, SUPPORTED_LANGS } from '@/utils/i18n';
import { t } from '@/utils/translations';

export async function getStaticPaths() {
  const CATEGORY_KEYS = ['build', 'invest', 'life'] as const;
  return SUPPORTED_LANGS.flatMap((lang) =>
    CATEGORY_KEYS.map((slug) => ({ params: { lang, slug } })),
  );
}

type Post = CollectionEntry<'post'>;

function toUrl(entry: Post, lang: Lang): string {
  const idWithoutExt = entry.id.replace(/\.(md|mdx|markdown)$/i, '');
  const slug = idWithoutExt.replace(new RegExp(`^${lang}/`), '');
  return `/${lang}/posts/${slug}/`;
}

const PAGE_SIZE = 12;
const lang = ((Astro.params.lang as Lang) || DEFAULT_LANG) as Lang;
const slug = String(Astro.params.slug || '');

const posts = await getCollection('post', (p) => !p.data.draft && p.data.locales === (lang as any));
const translated = String(t(lang as any, `categories.${slug}`)).toLowerCase();
const all = posts
  .filter((p) => {
    const c = String(p.data.category || '').toLowerCase();
    return c === translated || c === slug;
  })
  .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const items = all.slice(0, PAGE_SIZE);
const total = all.length;
const lastPage = Math.max(1, Math.ceil(total / PAGE_SIZE));
const page = {
  data: items,
  start: 0,
  end: items.length - 1,
  total,
  currentPage: 1,
  size: PAGE_SIZE,
  lastPage,
  url: {
    current: Astro.url.pathname,
    prev: undefined,
    next: lastPage > 1 ? `/${lang}/category/${slug}/2/` : undefined,
    first: undefined,
    last: lastPage > 1 ? `/${lang}/category/${slug}/${lastPage}/` : undefined,
  },
};

const h1 = t(lang, `headings.${slug}.h1`) || t(lang, `navigation.${slug}`) || slug;
const h2 = t(lang, `headings.${slug}.h2`);
const title = h1;
const description = h2;
---

<LandingLayout lang={lang} title={title} description={description} canonical={Astro.url.href}>
  <fragment slot="header">
    <h1 class="text-3xl font-bold tracking-tight sm:text-4xl">{h1}</h1>
    <h2 class="mt-2 text-xl text-neutral-600 dark:text-neutral-300">{h2}</h2>
  </fragment>
  <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {
      items.map((p, idx) => (
        <CardWithPriority
          component={PostCardCover}
          index={idx}
          props={{
            href: toUrl(p, lang),
            imageSrc: p.data.heroImage,
            imageAlt: p.data.heroImageAlt,
            title: p.data.title,
            date: p.data.pubDate,
            category: p.data.category,
            lang,
            class: 'shadow-sm ring-1 ring-black/5 dark:ring-white/10',
          }}
        />
      ))
    }
  </div>

  <Pagination page={page} class="mt-10" />
</LandingLayout>
