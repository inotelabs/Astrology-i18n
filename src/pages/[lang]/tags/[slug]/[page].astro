---
import { getCollection, type CollectionEntry } from 'astro:content';
import LandingLayout from '@/layouts/LandingLayout.astro';
import Pagination from '@/features/Pagination.astro';
import PostCardCover from '@/cards/PostCardCover.astro';
import CardWithPriority from '@/features/CardWithPriority.astro';
import type { Lang } from '@/utils/i18n';
import { DEFAULT_LANG, SUPPORTED_LANGS } from '@/utils/i18n';
import { t } from '@/utils/translations';

import type { GetStaticPaths } from 'astro';

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const posts = await getCollection('post', (p) => !p.data.draft);
  const TAG_KEYS = [
    'reflect',
    'media',
    'roam',
    'risk',
    'strategy',
    'allocation',
    'innovation',
    'model',
    'management',
  ] as const;

  const byLangAndTag = SUPPORTED_LANGS.flatMap((lang) => {
    const listForLang = posts
      .filter((p) => p.data.locales === (lang as any))
      .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

    return TAG_KEYS.flatMap((key) => {
      const translated = String(t(lang as any, `tags.${key}`)).toLowerCase();
      const list = listForLang.filter((p) => {
        const tags = (p.data.tags || []).map((x: string) => String(x).toLowerCase());
        return tags.includes(translated) || tags.includes(String(key));
      });
      return paginate(list, { pageSize: 12, params: { lang, slug: key } });
    });
  });

  return byLangAndTag;
};

type Post = CollectionEntry<'post'>;

function toUrl(entry: Post, lang: Lang): string {
  const idWithoutExt = entry.id.replace(/\.(md|mdx|markdown)$/i, '');
  const slug = idWithoutExt.replace(new RegExp(`^${lang}/`), '');
  return `/${lang}/posts/${slug}/`;
}

const lang = ((Astro.params.lang as Lang) || DEFAULT_LANG) as Lang;
const slug = String(Astro.params.slug || '');
const pageParam = Astro.params.page as string | undefined;
if (pageParam === '1') {
  return Astro.redirect(`/${lang}/tags/${slug}/`, 301);
}

const { page } = Astro.props as { page: any };
const items = (page?.data as Post[]) || [];

const h1 = t(lang, `headings.${slug}.h1`) || t(lang, `tags.${slug}`) || slug;
const h2 = t(lang, `headings.${slug}.h2`);
const title = h1;
const description = h2;
---

<LandingLayout lang={lang} title={title} description={description} canonical={Astro.url.href}>
  <fragment slot="header">
    <h1 class="text-3xl font-bold tracking-tight sm:text-4xl">{h1}</h1>
    <h2 class="mt-2 text-xl text-neutral-600 dark:text-neutral-300">{h2}</h2>
  </fragment>
  <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {
      items.map((p, idx) => (
        <CardWithPriority
          component={PostCardCover}
          index={idx}
          props={{
            href: toUrl(p, lang),
            imageSrc: p.data.heroImage,
            imageAlt: p.data.heroImageAlt,
            title: p.data.title,
            date: p.data.pubDate,
            category: p.data.category,
            lang,
            class: 'shadow-sm ring-1 ring-black/5 dark:ring-white/10',
          }}
        />
      ))
    }
  </div>

  <Pagination page={page} class="mt-10" />
</LandingLayout>
