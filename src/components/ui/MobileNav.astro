---
import type { Lang } from '@/utils/i18n';
import { t } from '@/utils/translations';
import { NAV_ITEMS } from '@/utils/navItems';
import { getRelativeLocaleUrl } from 'astro:i18n';

interface Props {
  lang?: Lang;
  class?: string;
}
const { lang, class: className } = Astro.props as Props;
const resolvedLang = ((Astro.currentLocale as Lang | undefined) ??
  (lang as Lang | undefined) ??
  'zh') as Lang;
---

<div class={`lg:hidden hidden ${className ?? ''}`.trim()} data-mobile-panel>
  <div class="mx-auto max-w-6xl px-4 py-2 sm:px-6">
    <div class="space-y-2">
      {NAV_ITEMS.map((item, i) => (
        item.children && item.children.length > 0 ? (
          <div class="overflow-hidden rounded-md border border-neutral-200/70 dark:border-neutral-800/70">
            <button
              type="button"
              class="flex w-full items-center justify-between bg-neutral-50/60 px-3 py-2 text-left text-sm font-semibold text-neutral-800 dark:bg-neutral-900/60 dark:text-neutral-100"
              data-accordion-trigger={`m-${i}`}
            >
              <span>{t(resolvedLang, `navigation.${item.key}`)}</span>
              <svg class="h-4 w-4 text-neutral-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.086l3.71-3.855a.75.75 0 111.08 1.04l-4.24 4.405a.75.75 0 01-1.08 0L5.25 8.27a.75.75 0 01-.02-1.06z" clip-rule="evenodd"/></svg>
            </button>
            <div class="hidden px-3 py-2" data-accordion-panel={`m-${i}`}>
              <a
                href={getRelativeLocaleUrl(resolvedLang, item.path)}
                class="block rounded px-2 py-1.5 text-sm text-neutral-700 hover:bg-neutral-50 dark:text-neutral-300 dark:hover:bg-neutral-800"
              >
                {t(resolvedLang, `navigation.${item.key}`)}
              </a>
              <div class="mt-1 space-y-1 border-t border-neutral-200/60 pt-2 dark:border-neutral-800/60">
                {item.children.map((c) => (
                  <a
                    href={getRelativeLocaleUrl(resolvedLang, c.path)}
                    class="block rounded px-2 py-1.5 text-sm text-neutral-700 hover:bg-neutral-50 dark:text-neutral-300 dark:hover:bg-neutral-800"
                  >
                    {t(resolvedLang, `${c.ns ?? 'navigation'}.${c.key}`)}
                  </a>
                ))}
              </div>
            </div>
          </div>
        ) : (
          <a
            href={getRelativeLocaleUrl(resolvedLang, item.path)}
            class="block rounded-md border border-neutral-200/70 bg-white px-3 py-2 text-sm font-semibold text-neutral-800 hover:bg-neutral-50 dark:border-neutral-800/70 dark:bg-neutral-900 dark:text-neutral-100 dark:hover:bg-neutral-800"
          >
            {t(resolvedLang, `navigation.${item.key}`)}
          </a>
        )
      ))}
    </div>
  </div>
</div>

<script is:inline>
  // Stable handler reference so we don't double-toggle
  function handleAccordionClick(e) {
    var t = e.target;
    if (!(t instanceof Element)) return;
    var trigger = t.closest('[data-accordion-trigger]');
    if (!trigger) return;
    var root = trigger.closest('[data-mobile-panel]');
    if (!root) return;
    var id = trigger.getAttribute('data-accordion-trigger');
    if (!id) return;
    var panel = root.querySelector('[data-accordion-panel="' + id + '"]');
    if (panel) panel.classList.toggle('hidden');
  }

  function initMobileAccordion() {
    var script = document.currentScript;
    var root = script && script.previousElementSibling;
    if (!root || !(root instanceof HTMLElement)) {
      root = document.querySelector('[data-mobile-panel]');
    }
    if (!root) return;

    if (root.getAttribute('data-accordion-initialized') === 'true') return;
    root.setAttribute('data-accordion-initialized', 'true');
    root.addEventListener('click', handleAccordionClick);
  }

  initMobileAccordion();
  document.addEventListener('astro:page-load', initMobileAccordion);
</script>
