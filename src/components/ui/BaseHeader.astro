---
import type { Lang } from '@/utils/i18n';
import { SUPPORTED_LANGS, DEFAULT_LANG, toAbsolute } from '@/utils/i18n';
import { t } from '@/utils/translations';
import { SEO } from 'astro-seo';
import { getRelativeLocaleUrl } from 'astro:i18n';

interface Props {
  lang: Lang;
  title?: string;
  description?: string;
  keywords?: string | string[];
  image?: string;
  imageAlt?: string;
  publishedTime?: string | Date | undefined;
  modifiedTime?: string | Date | undefined;
  canonical?: string;
  noindex?: boolean;
  authorName?: string;
  authorUrl?: string;
  section?: string;
  tags?: string[];
}

const {
  lang: langProp = 'zh',
  title,
  description,
  keywords,
  image,
  imageAlt,
  publishedTime,
  modifiedTime,
  canonical,
  noindex = false,
  authorName,
  authorUrl,
  section,
  tags = [],
} = Astro.props as Props;

const resolvedLang = ((Astro.currentLocale as Lang | undefined) ??
  (langProp as Lang) ??
  'zh') as Lang;

const siteName = t(resolvedLang, 'site.name');
const titleTemplate = t(resolvedLang, 'site.titleTemplate');
const titleDefault = siteName;
const metaDescription = description ?? t(resolvedLang, 'site.description');
const keywordsStr = Array.isArray(keywords) ? keywords.join(', ') : keywords;

const rssPath = getRelativeLocaleUrl(resolvedLang, '/rss.xml').replace(/(\.xml)\/$/, '$1');
const rssURL = new URL(rssPath, Astro.site!).href;

const providedSrc =
  typeof image === 'string'
    ? image
    : image && typeof (image as any).src === 'string'
      ? (image as any).src
      : undefined;
const DEFAULT_OG = '/open-graph.webp';
const imageSrc = providedSrc || DEFAULT_OG;
const absImage =
  imageSrc.startsWith('http://') || imageSrc.startsWith('https://')
    ? imageSrc
    : new URL(imageSrc, Astro.site!).href;

const absAuthorUrl = authorUrl
  ? authorUrl.startsWith('http://') || authorUrl.startsWith('https://')
    ? authorUrl
    : new URL(authorUrl, Astro.site!).href
  : undefined;

const isArticle = Boolean(publishedTime);

const ogLocaleMap: Record<string, string> = {
  zh: 'zh_CN',
  en: 'en_US',
  fr: 'fr_FR',
  es: 'es_ES',
  ru: 'ru_RU',
  ja: 'ja_JP',
  ko: 'ko_KR',
  pt: 'pt_PT',
  de: 'de_DE',
  id: 'id_ID',
};
const ogLocale = ogLocaleMap[resolvedLang] || 'en_US';
const ogAlternateLocales = SUPPORTED_LANGS.filter((l) => l !== resolvedLang).map(
  (l) => ogLocaleMap[l] || 'en_US',
);

const languageAlternates = SUPPORTED_LANGS.map((l) => ({
  hrefLang: l,
  href: new URL(toAbsolute(l, Astro.url.pathname), Astro.site!).href,
}));
const xDefaultHref = new URL(toAbsolute(DEFAULT_LANG, Astro.url.pathname), Astro.site!).href;

const seoProps: any = {
  title: title ?? undefined,
  titleTemplate,
  titleDefault,
  description: metaDescription,
  canonical: canonical ?? undefined,
  noindex: !!noindex,
  languageAlternates: [...languageAlternates, { hrefLang: 'x-default', href: xDefaultHref }],
  openGraph: {
    basic: {
      title: title || siteName,
      type: isArticle ? 'article' : 'website',
      image: absImage,
      url: Astro.url.href,
    },
    optional: {
      description: metaDescription,
      locale: ogLocale,
      localeAlternate: ogAlternateLocales,
      siteName: siteName,
    },
    ...(isArticle
      ? {
          article: {
            ...(publishedTime ? { publishedTime: new Date(publishedTime).toISOString() } : {}),
            ...(modifiedTime ? { modifiedTime: new Date(modifiedTime).toISOString() } : {}),
            ...(absAuthorUrl || authorName
              ? { authors: [absAuthorUrl ?? (authorName as string)] }
              : {}),
            ...(section ? { section } : {}),
            ...(Array.isArray(tags) ? { tags } : {}),
          },
        }
      : {}),
    image: {
      ...(imageAlt ? { alt: imageAlt } : {}),
    },
  },
  twitter: {
    card: absImage ? 'summary_large_image' : 'summary',
    site: t(resolvedLang, 'site.twitter.site'),
    creator: t(resolvedLang, 'site.twitter.creator'),
    title: title || siteName,
    description: metaDescription,
    image: absImage,
    ...(imageAlt ? { imageAlt } : {}),
  },
  extend: {
    link: [
      { rel: 'icon', href: '/favicon.ico' },
      { rel: 'sitemap', href: '/sitemap-index.xml' },
      { rel: 'alternate', type: 'application/rss+xml', title: siteName, href: rssURL },
    ],
    meta: [
      ...(keywordsStr ? [{ name: 'keywords', content: keywordsStr }] : []),
      ...(authorName ? [{ name: 'author', content: authorName }] : []),
      { name: 'generator', content: Astro.generator },
    ],
  },
} as const;
---

<script is:inline>
  try {
    const stored = localStorage.getItem('theme');
    if (stored === 'light') {
      document.documentElement.classList.remove('dark');
      document.documentElement.setAttribute('data-theme', 'light');
    } else if (stored === 'dark') {
      document.documentElement.classList.add('dark');
      document.documentElement.setAttribute('data-theme', 'dark');
    } else {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      document.documentElement.classList.toggle('dark', prefersDark);
      document.documentElement.setAttribute('data-theme', 'system');
    }
  } catch (e) {}
</script>

<SEO {...seoProps} />

{
  (() => {
    const canonicalURL = canonical || Astro.url.href;
    const pageTitle = title ? titleTemplate.replace('%s', title) : siteName;
    const ld: any = {
      '@context': 'https://schema.org',
      '@type': isArticle ? 'Article' : 'WebPage',
      inLanguage: resolvedLang,
      name: pageTitle,
      url: canonicalURL,
      description: metaDescription,
      mainEntityOfPage: canonicalURL,
    };
    if (absImage) ld.image = absImage;
    if (isArticle) {
      if (title) ld.headline = title;
      if (publishedTime) ld.datePublished = new Date(publishedTime).toISOString();
      if (modifiedTime) ld.dateModified = new Date(modifiedTime).toISOString();
      ld.publisher = { '@type': 'Organization', name: siteName };
      if (authorName)
        ld.author = {
          '@type': 'Person',
          name: authorName,
          ...(absAuthorUrl ? { url: absAuthorUrl } : {}),
        };
      if (section) ld.articleSection = section;
      if (Array.isArray(tags) && tags.length) ld.keywords = tags.join(', ');
    }
    return <script type="application/ld+json" is:inline set:html={JSON.stringify(ld)} />;
  })()
}
