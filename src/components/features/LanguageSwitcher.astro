---
import type { Lang } from '@/utils/i18n';
import { SUPPORTED_LANGS, toAbsolute } from '@/utils/i18n';
import { t } from '@/utils/translations';

interface Props {
  lang?: Lang;
  class?: string;
}

const { lang, class: className } = Astro.props as Props;
const resolvedLang = ((Astro.currentLocale as Lang | undefined) ??
  (lang as Lang | undefined) ??
  'zh') as Lang;

const FLAG_MAP: Record<Lang, string> = {
  zh: '🇨🇳',
  en: '🇺🇸',
  fr: '🇫🇷',
  es: '🇪🇸',
  ru: '🇷🇺',
  ja: '🇯🇵',
  ko: '🇰🇷',
  pt: '🇵🇹',
  de: '🇩🇪',
  id: '🇮🇩',
};
const currentFlag = FLAG_MAP[resolvedLang] ?? '🌐';
---

<details class={`relative ${className ?? ''}`.trim()} data-lang-root>
  <summary
    class="cursor-pointer rounded-md p-2 text-neutral-700 select-none hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-800"
  >
    <span aria-hidden="true">{currentFlag}</span>
    <span class="sr-only">{t(resolvedLang, 'language.switch')}</span>
  </summary>
  <div
    class="absolute top-full left-1/2 z-50 mt-1 min-w-40 -translate-x-1/2 rounded-md border border-neutral-200/70 bg-white py-1.5 shadow-lg dark:border-neutral-800/70 dark:bg-neutral-900"
  >
    {
      SUPPORTED_LANGS.map((l) => (
        <a
          href={toAbsolute(l, Astro.url.pathname)}
          class={`flex items-center gap-2 px-2.5 py-1.5 text-sm hover:bg-neutral-50 dark:hover:bg-neutral-800 ${l === resolvedLang ? 'font-medium text-neutral-900 dark:text-white' : 'text-neutral-700 dark:text-neutral-300'}`}
        >
          <span aria-hidden="true">{FLAG_MAP[l] ?? '🌐'}</span>
          <span>{t(l, 'language.name')}</span>
        </a>
      ))
    }
  </div>
</details>

<style>
  details[data-lang-root] > summary::-webkit-details-marker {
    display: none;
  }
  details[data-lang-root] > summary {
    list-style: none;
  }
</style>
