---
import type { Lang } from '@/utils/i18n';
import { categoryLabel, tagLabel } from '@/utils/translations';
import { formatDate } from '@/utils/date';

interface Props {
  href?: string;
  title: string;
  date?: string | Date;
  category?: string;
  tags?: string[];
  lang?: Lang;
  class?: string;
}

const {
  href,
  title,
  date,
  category,
  tags = [],
  lang = 'zh',
  class: className,
} = Astro.props as Props;

const Container = href ? 'a' : 'div';
const containerAttrs = href ? { href } : {};
---

<Container
  {...containerAttrs}
  class={`group block w-full overflow-hidden rounded-md pl-2 pr-2 sm:pl-4 lg:pl-6 py-2 hover:bg-neutral-50 dark:hover:bg-neutral-900/40 ${className ?? ''} transition-all duration-200 ease-out hover:-translate-y-0.5`.trim()}
>
  <div class="flex items-center gap-6 text-sm">
    <time
      class="w-28 shrink-0 whitespace-nowrap text-neutral-500 [font-variant-numeric:tabular-nums] sm:w-32 dark:text-neutral-400"
      datetime={date ? new Date(date).toISOString() : undefined}
    >
      {date ? formatDate(date, lang) : ''}
    </time>

    <div
      class="min-w-0 flex-1 truncate font-medium text-neutral-900 decoration-1 underline-offset-2 group-hover:underline dark:text-neutral-100"
    >
      {title}
    </div>

    {
      tags.length > 0 && (
        <span class="ml-4 min-w-0 truncate text-neutral-500 sm:ml-6 lg:ml-12 dark:text-neutral-400">
          {tags.map((tg) => tagLabel(lang, tg)).join(', ')}
        </span>
      )
    }

    {
      category && (
        <span class="w-28 shrink-0 truncate text-right text-neutral-600 sm:w-36 dark:text-neutral-300">
          {categoryLabel(lang, category)}
        </span>
      )
    }
  </div>
</Container>
